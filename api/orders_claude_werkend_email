<?php
// api/orders.php - Definitieve versie met PDF functionaliteit

// Error logging
ini_set('display_errors', 0); // Geen fouten tonen aan gebruiker
ini_set('log_errors', 1);
error_reporting(E_ALL); 
ini_set('error_log', __DIR__ . '/orders_error.log');
error_log("Order script gestart: " . date('Y-m-d H:i:s'));

// --- Composer Autoloader & Use statements ---
$autoloaderPath = __DIR__ . '/../vendor/autoload.php';
if (!file_exists($autoloaderPath)) {
    http_response_code(500); 
    header('Content-Type: application/json'); 
    header('Access-Control-Allow-Origin: *');
    error_log("FATAL ERROR: Composer autoloader not found at " . $autoloaderPath);
    echo json_encode(['status' => 'error', 'message' => 'Internal server configuration error (Autoloader).']);
    exit;
}
require $autoloaderPath;

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception as PHPMailerException;
// Alle mPDF classes importeren in één keer
use Mpdf\Mpdf;
use Mpdf\Output\Destination;
use Mpdf\Config\ConfigVariables;
use Mpdf\Config\FontVariables;

// PDF inschakelen/uitschakelen
$pdfEnabled = true; // Zet op true om PDF te activeren

// Controleer of mPDF beschikbaar is als we het willen gebruiken
if ($pdfEnabled) {
    error_log("PDF is enabled, checking mPDF availability");
    if (!class_exists('\\Mpdf\\Mpdf')) {
        error_log("ERROR: mPDF class not found. PDF generation will be disabled.");
        $pdfEnabled = false;
    } else {
        error_log("mPDF class found and available");
    }
}

// --- Database Configuratie ---
$db_host = 'localhost';
$db_name = 'likeabilly';
$db_user = 'robnolten';
$db_pass = 'jg247A9e~';
$db_charset = 'utf8mb4';
// ---------------------------

// --- Standaard Headers ---
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

// Preflight & Method Check
if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') { 
    http_response_code(200); 
    exit(); 
}
if ($_SERVER['REQUEST_METHOD'] !== 'POST') { 
    http_response_code(405); 
    echo json_encode(['status' => 'error', 'message' => 'Invalid request method.']); 
    exit(); 
}

// Ontvang en decodeer JSON data
$jsonPayload = file_get_contents('php://input');
error_log("Received payload length: " . strlen($jsonPayload));
$data = json_decode($jsonPayload, true);

// Validatie van JSON
if ($data === null && json_last_error() !== JSON_ERROR_NONE) { 
    http_response_code(400); 
    error_log("Invalid JSON: " . json_last_error_msg()); 
    echo json_encode(['status' => 'error', 'message' => 'Invalid data format received.']); 
    exit(); 
}
if (empty($data) || !isset($data['configuration']) || !isset($data['customer'])) { 
    http_response_code(400); 
    error_log("Incomplete data: " . $jsonPayload); 
    echo json_encode(['status' => 'error', 'message' => 'Incomplete data received.']); 
    exit(); 
}

// --- Hoofdlogica ---
$dsn = "mysql:host=$db_host;dbname=$db_name;charset=$db_charset";
$options = [ 
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, 
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, 
    PDO::ATTR_EMULATE_PREPARES => false 
];

$orderId = null;
$emailToMakerStatus = '(Not Attempted)';
$pdfStatus = '(Not Attempted)';
$emailToCustomerStatus = '(Not Attempted)';

try {
    // 1. DB Verbinding & Insert
    error_log("Attempting database connection");
    $pdo = new PDO($dsn, $db_user, $db_pass, $options);
    error_log("DB connection successful");
    
    $customer = $data['customer']; 
    $config = $data['configuration'];
    $configJson = json_encode($config); 
    
    if ($configJson === false) { 
        throw new \Exception("JSON encode failed: " . json_last_error_msg()); 
    }
    
    error_log("Preparing to insert order");
    $price = isset($config['calculatedPrice']) ? $config['calculatedPrice'] : 0.00;
    
    $sql = "INSERT INTO orders (customer_name, customer_email, customer_address, customer_zip, customer_city, customer_phone, customer_notes, create_account, configuration_json, price, status, order_date) VALUES (:name, :email, :address, :zip, :city, :phone, :notes, :create_account, :config_json, :price, :status, NOW())";
    $stmt = $pdo->prepare($sql);
    $status_default = 'received'; 
    $create_account_bool = !empty($customer['createAccount']);
    
    $params = [ 
        ':name' => isset($customer['name']) ? $customer['name'] : '', 
        ':email' => isset($customer['email']) ? $customer['email'] : '', 
        ':address' => isset($customer['address']) ? $customer['address'] : '', 
        ':zip' => isset($customer['zip']) ? $customer['zip'] : '', 
        ':city' => isset($customer['city']) ? $customer['city'] : '', 
        ':phone' => isset($customer['phone']) ? $customer['phone'] : null, 
        ':notes' => isset($customer['notes']) ? $customer['notes'] : null, 
        ':create_account' => $create_account_bool ? 1 : 0, 
        ':config_json' => $configJson, 
        ':price' => $price, 
        ':status' => $status_default 
    ];
    
    error_log("Executing database insert");
    $stmt->execute($params);
    $orderId = $pdo->lastInsertId();
    error_log("Order inserted with ID: " . $orderId);
    
    if (!$orderId) { 
        throw new \Exception("Failed to retrieve order ID after insert."); 
    }
    
    // --- Stap 1: Genereer Parts List ---
    error_log("Generating parts list");
    $partsListArray = generatePartsList($config);
    $partsListString = formatPartsListForEmail($partsListArray);
    error_log("Parts list generated successfully");
    
    // --- Stap 2: E-mail naar Maker ---
    $emailEnabled = true; // Zet op false om email te deactiveren
    
    if ($emailEnabled) {
        error_log("Email functionality is enabled");
        $emailToMakerStatus = '(Attempted, Unknown Error)';
        $mailMaker = new PHPMailer(true);
        try {
            // SMTP instellingen
            $mailMaker->isSMTP();
            $mailMaker->Host       = 'mail.hostingserver.nl';
            $mailMaker->SMTPAuth   = true;
            $mailMaker->Username   = 'rob@likeabilly.nl';
            $mailMaker->Password   = '55!ejWo21';
            $mailMaker->CharSet    = 'UTF-8';
            $mailMaker->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;
            $mailMaker->Port       = 465;
            
            $mailMaker->setFrom('rob@likeabilly.nl', 'Likeabilly Webshop');
            $mailMaker->addAddress('rob@likeabilly.nl', 'Meubelmaker Rob');
            $mailMaker->isHTML(false);
            $mailMaker->Subject = "Nieuwe Likeabilly Bestelling: #" . $orderId;
            
            // Gedetailleerde e-mail inhoud voor maker
            $mailBodyMaker = "Bestelling #{$orderId} ontvangen op " . date('d-m-Y H:i') . "\n\n";
            $mailBodyMaker .= "Klantgegevens:\n";
            $mailBodyMaker .= "Naam: " . (isset($customer['name']) ? $customer['name'] : '-') . "\n";
            $mailBodyMaker .= "E-mail: " . (isset($customer['email']) ? $customer['email'] : '-') . "\n";
            $mailBodyMaker .= "Adres: " . (isset($customer['address']) ? $customer['address'] : '-') . ", " . (isset($customer['zip']) ? $customer['zip'] : '-') . " " . (isset($customer['city']) ? $customer['city'] : '-') . "\n";
            $mailBodyMaker .= "Telefoon: " . (isset($customer['phone']) ? $customer['phone'] : '-') . "\n";
            $mailBodyMaker .= "Account aanmaken: " . ($create_account_bool ? 'Ja' : 'Nee') . "\n";
            $mailBodyMaker .= "Opmerkingen: " . (!empty($customer['notes']) ? $customer['notes'] : '-') . "\n\n";
            $mailBodyMaker .= $partsListString; // Onderdelenlijst
            
            $mailMaker->Body = $mailBodyMaker;
            $mailMaker->send();
            $emailToMakerStatus = 'Sent';
            error_log("Email sent successfully to maker");
        } catch (PHPMailerException $e_mail_maker) {
            error_log("Mailer Error: " . $e_mail_maker->getMessage());
            $emailToMakerStatus = 'FAILED - ' . $e_mail_maker->getMessage();
        } catch (\Throwable $e_mail_general) {
            error_log("General mail error: " . $e_mail_general->getMessage());
            $emailToMakerStatus = 'FAILED - ' . $e_mail_general->getMessage();
        }
    } else {
        $emailToMakerStatus = 'Disabled';
        error_log("Email functionality is disabled");
    }
    
    // --- Stap 3: PDF Generatie ---
    // Alleen uitvoeren als de PDF functionaliteit is ingeschakeld
    $pdfContent = null;
    
    if ($pdfEnabled) {
        error_log("PDF generation functionality is enabled");
        try {
            // Maak temp directory als deze niet bestaat
            $pdfTempDir = __DIR__ . '/../tmp';
            if (!is_dir($pdfTempDir)) {
                error_log("Creating PDF temp directory: " . $pdfTempDir);
                @mkdir($pdfTempDir, 0775, true);
            }
            
            if (!is_dir($pdfTempDir)) {
                error_log("ERROR: Failed to create PDF temp directory");
                $pdfStatus = 'FAILED - Cannot create temp directory';
            } elseif (!is_writable($pdfTempDir)) {
                error_log("ERROR: PDF temp directory is not writable: " . $pdfTempDir);
                $pdfStatus = 'FAILED - Temp directory not writable';
            } else {
                error_log("PDF temp directory is ready: " . $pdfTempDir);
                // Company info
                $companyName = "Likeabilly V.O.F.";
                $companyAddress = "Voorbeeldstraat 1, 1234 AB Schiedam";
                $companyVat = "NL123456789B01";
                $companyKvK = "12345678";
                $orderDate = date('d-m-Y H:i');
                
                // Get configuration info
                $width = isset($config['inputWidth']) ? $config['inputWidth'] : '?';
                $height = isset($config['inputHeight']) ? $config['inputHeight'] : '?';
                $depth = isset($config['inputDepth']) ? $config['inputDepth'] : '?';
                $material = isset($config['material']) ? $config['material'] : 'Standaard';
                $layoutType = isset($config['isCustomLayout']) && $config['isCustomLayout'] ? 'Aangepast' : 'Standaard';
                
                // Eenvoudige HTML template - kleine versie voor test
                error_log("Preparing PDF HTML template");
                $html = "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Order {$orderId}</title></head><body>";
                $html .= "<h1>Orderbevestiging #{$orderId}</h1>";
                $html .= "<p><strong>Datum:</strong> {$orderDate}</p>";
                $html .= "<p><strong>Klant:</strong> " . (isset($customer['name']) ? htmlspecialchars($customer['name']) : '-') . "</p>";
                $html .= "<p><strong>Email:</strong> " . (isset($customer['email']) ? htmlspecialchars($customer['email']) : '-') . "</p>";
                $html .= "<p><strong>Prijs:</strong> &euro;" . number_format($price, 2, ',', '.') . "</p>";
                $html .= "</body></html>";
                
                // Genereer PDF -- EXTRA DEBUGGING TOEGEVOEGD --
                error_log("About to initialize mPDF with temp dir: " . $pdfTempDir);
                $mpdf = new Mpdf([
                    'tempDir' => $pdfTempDir,
                    'mode' => 'utf-8',
                    'format' => 'A4'
                ]);
                error_log("mPDF initialized successfully");
                
                error_log("Writing HTML to PDF");
                $mpdf->WriteHTML($html);
                
                error_log("Outputting PDF to string");
                $pdfContent = $mpdf->Output('', Destination::STRING_RETURN);
                
                if ($pdfContent) {
                    $pdfStatus = 'Generated';
                    error_log("PDF generation successful");
                } else {
                    $pdfStatus = 'FAILED - Empty PDF content';
                    error_log("PDF generation failed - empty content");
                }
            }
        } catch (\Throwable $e_pdf) {
            error_log("PDF Generation Error: " . $e_pdf->getMessage());
            $pdfStatus = 'FAILED - ' . $e_pdf->getMessage();
        }
        
        // --- Stap 4: E-mail naar Klant (met PDF) ---
        if ($pdfContent && $emailEnabled && isset($customer['email']) && !empty($customer['email'])) {
            error_log("Preparing to send email to customer");
            $emailToCustomerStatus = '(Attempted, Unknown Error)';
            
            try {
                $mailCustomer = new PHPMailer(true);
                
                // SMTP instellingen
                $mailCustomer->isSMTP();
                $mailCustomer->Host       = 'mail.hostingserver.nl';
                $mailCustomer->SMTPAuth   = true;
                $mailCustomer->Username   = 'rob@likeabilly.nl';
                $mailCustomer->Password   = '55!ejWo21';
                $mailCustomer->CharSet    = 'UTF-8';
                $mailCustomer->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;
                $mailCustomer->Port       = 465;
                
                $mailCustomer->setFrom('rob@likeabilly.nl', 'Likeabilly Webshop');
                $mailCustomer->addAddress($customer['email'], isset($customer['name']) ? $customer['name'] : '');
                $mailCustomer->isHTML(false);
                $mailCustomer->Subject = "Likeabilly Bestelling Bevestiging #" . $orderId;
                
                // E-mail body voor klant
                $customerBody = "Beste " . (isset($customer['name']) ? $customer['name'] : 'klant') . ",\n\n";
                $customerBody .= "Bedankt voor uw bestelling bij Likeabilly!\n\n";
                $customerBody .= "Uw bestelnummer is: #{$orderId}\n";
                $customerBody .= "Orderdatum: " . date('d-m-Y H:i') . "\n\n";
                $customerBody .= "We hebben uw bestelling ontvangen en zullen deze zo spoedig mogelijk verwerken.\n";
                $customerBody .= "In de bijlage vindt u een PDF met alle details van uw bestelling.\n\n";
                $customerBody .= "Heeft u vragen? Neem gerust contact met ons op.\n\n";
                $customerBody .= "Met vriendelijke groet,\n";
                $customerBody .= "Likeabilly Team\n\n";
                $customerBody .= "info@likeabilly.nl\n";
                
                $mailCustomer->Body = $customerBody;
                
                // Voeg PDF toe als bijlage
                error_log("Adding PDF attachment to customer email");
                $mailCustomer->addStringAttachment($pdfContent, "Likeabilly_Bestelling_{$orderId}.pdf");
                
                // Verzend de e-mail
                error_log("Sending customer email");
                $mailCustomer->send();
                $emailToCustomerStatus = 'Sent';
                error_log("Email sent successfully to customer");
                
            } catch (PHPMailerException $e_customer_mail) {
                error_log("Customer Mailer Error: " . $e_customer_mail->getMessage());
                $emailToCustomerStatus = 'FAILED - ' . $e_customer_mail->getMessage();
            } catch (\Throwable $e_customer_general) {
                error_log("Customer Email General Error: " . $e_customer_general->getMessage());
                $emailToCustomerStatus = 'FAILED - ' . $e_customer_general->getMessage();
            }
        } else {
            if ($pdfStatus !== 'Generated') {
                $emailToCustomerStatus = 'Skipped - PDF generation failed';
            } elseif (!$emailEnabled) {
                $emailToCustomerStatus = 'Skipped - Email disabled';
            } elseif (!isset($customer['email']) || empty($customer['email'])) {
                $emailToCustomerStatus = 'Skipped - No customer email';
            } else {
                $emailToCustomerStatus = 'Skipped - Unknown reason';
            }
            error_log("Customer email skipped: " . $emailToCustomerStatus);
        }
    } else {
        $pdfStatus = 'Disabled';
        $emailToCustomerStatus = 'Disabled';
        error_log("PDF functionality is disabled");
    }
    
    // Succesvolle afronding
    error_log("Preparing JSON response");
    $finalSuccessMessage = "Order #{$orderId} saved successfully. ";
    $finalSuccessMessage .= "Parts list generated. ";
    $finalSuccessMessage .= "Email to maker: {$emailToMakerStatus}. ";
    
    if ($pdfEnabled) {
        $finalSuccessMessage .= "PDF: {$pdfStatus}. ";
        $finalSuccessMessage .= "Email to customer: {$emailToCustomerStatus}.";
    }

    http_response_code(200);
    echo json_encode([
        'status' => 'success',
        'message' => $finalSuccessMessage,
        'orderId' => $orderId
    ]);
    error_log("JSON response sent: " . $finalSuccessMessage);
    exit;

} catch (\PDOException $e_db) {
    error_log("DATABASE ERROR: " . $e_db->getMessage() . " in " . $e_db->getFile() . " on line " . $e_db->getLine());
    http_response_code(500);
    echo json_encode([
        'status' => 'error', 
        'message' => 'Database error occurred. Please try again later.'
    ]);
    exit();
} catch (\Throwable $e_general) {
    error_log("GENERAL ERROR: " . $e_general->getMessage() . " in " . $e_general->getFile() . " on line " . $e_general->getLine());
    http_response_code(500);
    echo json_encode([
        'status' => 'error', 
        'message' => 'An error occurred while processing your order. Please try again later.'
    ]);
    exit();
}

// --- FUNCTIE DEFINITIES ---
function generatePartsList(array $config): array {
    $parts = [];
    try {
        $width = floatval(isset($config['inputWidth']) ? $config['inputWidth'] : 80);
        $height = floatval(isset($config['inputHeight']) ? $config['inputHeight'] : 200);
        $depth = floatval(isset($config['inputDepth']) ? $config['inputDepth'] : 40);
        $material = isset($config['material']) ? $config['material'] : 'onbekend';
        $shelvesPerCompartment = isset($config['shelvesPerCompartment']) ? intval($config['shelvesPerCompartment']) : 0;
        $dividers = isset($config['calculatedNumberOfDividers']) 
            ? intval($config['calculatedNumberOfDividers']) 
            : ($width > 80 ? floor(($width - 1) / 80) : 0);
        $thickness = isset($config['shelfThickness']) ? floatval($config['shelfThickness']) : 1.8;
        $kickboardHeight = isset($config['kickboardHeight']) ? floatval($config['kickboardHeight']) : 10;
        
        if ($thickness <= 0) $thickness = 1.8;

        $innerWidth = $width - (2 * $thickness);
        $innerDepth = $depth - $thickness;
        $dividerHeight = $height - 2 * $thickness;
        $numCompartments = $dividers + 1;
        
        if ($numCompartments <= 0) $numCompartments = 1;
        
        $compartmentInnerWidth = $dividers > 0 
            ? ($innerWidth - ($dividers * $thickness)) / $numCompartments 
            : $innerWidth;
            
        if ($compartmentInnerWidth < 0) $compartmentInnerWidth = 0;
        
        $totalShelfCount = $shelvesPerCompartment * $numCompartments;

        // Voeg onderdelen toe
        if ($height > 0 && $depth > 0) { 
            $parts[] = [
                'name' => 'Zijpaneel', 
                'qty' => 2, 
                'dim1' => $height, 
                'dim2' => $depth, 
                'material' => $material
            ]; 
        }
        
        if ($width > 0 && $depth > 0) { 
            $parts[] = [
                'name' => 'Bovenplank', 
                'qty' => 1, 
                'dim1' => $width, 
                'dim2' => $depth, 
                'material' => $material
            ]; 
        }
        
        if ($innerWidth > 0 && $depth > 0) { 
            $parts[] = [
                'name' => 'Bodemplank', 
                'qty' => 1, 
                'dim1' => $innerWidth, 
                'dim2' => $depth - $thickness, 
                'material' => $material
            ]; 
        } else { 
            $parts[] = [
                'name' => 'Bodemplank', 
                'qty' => 1, 
                'dim1' => $width, 
                'dim2' => $depth, 
                'material' => $material
            ];
        }
        
        if ($shelvesPerCompartment > 0 && $compartmentInnerWidth > 0 && $innerDepth > 0) { 
            $parts[] = [
                'name' => 'Legplank', 
                'qty' => $totalShelfCount, 
                'dim1' => $compartmentInnerWidth, 
                'dim2' => $innerDepth, 
                'material' => $material
            ]; 
        }
        
        if ($dividers > 0 && $dividerHeight > 0 && $innerDepth > 0) { 
            $parts[] = [
                'name' => 'Tussenschot', 
                'qty' => $dividers, 
                'dim1' => $dividerHeight, 
                'dim2' => $innerDepth, 
                'material' => $material
            ]; 
        }
        
        if ($innerWidth > 0 && $kickboardHeight > 0) { 
            $parts[] = [
                'name' => 'Kickboard (plint)', 
                'qty' => 1, 
                'dim1' => $innerWidth, 
                'dim2' => $kickboardHeight, 
                'material' => $material
            ]; 
        }
        
        $backWidth = $width - (2 * 0.9); 
        $backHeight = $height - (2 * 0.9);
        
        if ($backWidth > 0 && $backHeight > 0) { 
            $parts[] = [
                'name' => 'Achterwand', 
                'qty' => 1, 
                'dim1' => $backWidth, 
                'dim2' => $backHeight, 
                'material' => 'HDF 3mm'
            ]; 
        }

        // Bereken dimensies string voor elk onderdeel
        foreach ($parts as $i => $part) { 
            if (isset($part['dim1']) && isset($part['dim2'])) { 
                $parts[$i]['dimensions'] = sprintf("%.1f x %.1f cm", $part['dim1'], $part['dim2']); 
            } else { 
                $parts[$i]['dimensions'] = 'N/A'; 
            } 
        }
    } catch (\Throwable $e) { 
        error_log("Error inside generatePartsList: " . $e->getMessage()); 
        return []; 
    }
    return $parts;
}

function formatPartsListForEmail(array $partsList): string {
    $output = "Onderdelenlijst:\n";
    $output .= "--------------------------------------------------\n";
    $output .= str_pad("Aantal", 8) . str_pad("Onderdeel", 25) . str_pad("Afmeting", 20) . "Materiaal\n";
    $output .= "--------------------------------------------------\n";
    
    if (empty($partsList)) {
        $output .= "Geen onderdelen gegenereerd.\n";
    } else {
        foreach ($partsList as $part) {
            $qty = isset($part['qty']) ? $part['qty'] . 'x' : '?x';
            $name = isset($part['name']) ? $part['name'] : 'Onbekend';
            $dims = isset($part['dimensions']) ? $part['dimensions'] : 'N/A';
            $mat = isset($part['material']) ? $part['material'] : '?';
            
            try { 
                $output .= str_pad((string)$qty, 8) . str_pad((string)$name, 25) . str_pad((string)$dims, 20) . (string)$mat . "\n"; 
            } catch (\Throwable $e_strpad) { 
                error_log("Error formatting part: " . $e_strpad->getMessage()); 
                $output .= "Error formatting part\n"; 
            }
        }
    }
    
    $output .= "--------------------------------------------------\n";
    return $output;
}